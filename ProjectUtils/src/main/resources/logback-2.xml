<?xml version="1.0" encoding="UTF-8"?>
<!--
configuration: 根节点
    scan: 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟
    debug: 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false
-->
<configuration debug="false" scan="false" scanPeriod="60 seconds">
    <!--
        子节点 <property> : 用来定义变量值；它有两个属性 name 和value
        通过 <property> 定义的值会被插入到 logger 上下文中，可以使 ${} 来使用变量
            name: 变量的名称
            value: 的值时变量定义的值
    -->
    <!-- 应用名称 -->
    <property name="appName" value="Project-ProjectUtils"/>
    <!--
        子节点 <contextName> : 用来设置上下文名称，每个 logger 都关联到 logger 上下文，默认上下文名称为 default
            但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改
    -->
    <contextName>${appName}</contextName>
    <!--
       子节点 <timestamp>: 获取时间戳字符串，他有两个属性 key 和 datePattern
    　　　　key: 标识此 <timestamp> 的名字
    　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循 java.txt.SimpleDateFormat 的格式
    -->
    <timestamp key="datetime" datePattern="yyyy-MM-dd HH:mm:ss.SSS"/>
    <!-- 子节点 <appender>: 负责写日志的组件，它有两个必要属性 name 和 class 。name 指定 appender 名称，class 指定 appender 的全类名 -->
    <!--
        ch.qos.logback.core.ConsoleAppender: 把日志输出到控制台，有以下子节点:
            <encoder>: 对日志进行格式化。（具体参数稍后讲解 ）
            <target>: 字符串 System.out(默认) 或者 System.err （区别不多说了）
    -->
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
    <!--    <encoder>-->
    <!--        <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>-->
    <!--    </encoder>-->
    <!--</appender>-->
    <!--
        ch.qos.logback.core.FileAppender: 把日志添加到文件，有以下子节点:
            <file>: 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
            <append>: 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
            <encoder>: 对记录事件进行格式化。（具体参数稍后讲解 ）
            <prudent>: 如果是 true，日志会被安全的写入文件，即使其他的 FileAppender 也在向此文件做写入操作，效率低，默认是 false。
    -->
    <!-- 定义日志的根目录 -->
    <!--<property name="LOG_HOME" value="/app/log"/>-->
    <!--<appender name="FILE" class="ch.qos.logback.core.FileAppender">-->
    <!--    <file>${LOG_HOME}/${appName}.log</file>-->
    <!--    <append>true</append>-->
    <!--    <encoder>-->
    <!--        <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
    <!--    </encoder>-->
    <!--</appender>-->
    <!--
        ch.qos.logback.core.rolling.RollingFileAppender: 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点:
　　　　　　<file>: 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　<append>: 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。
　　　　　　<rollingPolicy>: 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。属性 class 定义具体的滚动策略类
　　　　　　  ch.qos.logback.core.rolling.TimeBasedRollingPolicy: 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动
                有以下子节点:
                    <fileNamePattern>: 必要节点，包含文件名及 %d 转换符， %d 可以包含一个 java.text.SimpleDateFormat 指定的时间格式
                        如: %d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。
                        RollingFileAppender 的 file 字节点可有可无。通过设置 file，可以为活动文件和归档文件指定不同位置
                        当前日志总是记录到 file 指定的文件（活动文件），活动文件的名字不会改变；
                        如果没设置 file，活动文件的名字会根据 fileNamePattern 的值，每隔一段时间改变一次。/ 或者 \ 会被当做目录分隔符。
                    <maxHistory>: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
                        假设设置每个月滚动，且 <maxHistory> 是 6，则只保存最近 6 个月的文件，删除之前的旧文件。
                        注意，删除旧文件时，那些为了归档而创建的目录也会被删除。
　　　　　　  ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy: 查看当前活动文件的大小
              如果超过指定大小会告知 RollingFileAppender 触发当前活动文件滚动。只有一个节点:
                <maxFileSize>: 这是活动文件的大小，默认值是 10MB。
            <prudent>: 当为 true 时，不支持 FixedWindowRollingPolicy。支持 TimeBasedRollingPolicy，但是有两个限制
                1: 不支持也不允许文件压缩，2: 不能设置 file 属性，必须留空。
            <triggeringPolicy>: 告知 RollingFileAppender 合适激活滚动。
　　　　　　  ch.qos.logback.core.rolling.FixedWindowRollingPolicy: 根据固定窗口算法重命名文件的滚动策略。有以下子节点:
                <minIndex>: 窗口索引最小值
                <maxIndex>: 窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为 12。
                <fileNamePattern>: 必须包含 %i 例如
                    假设最小值和最大值分别为 1 和 2，命名模式为 mylog%i.log，会产生归档文件 mylog1.log 和 mylog2.log
                    还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 mylog%i.log.zip
    -->
    <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    <file>${LOG_HOME}/${appName}.log</file>-->
    <!--    <append>true</append>-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
    <!--        <maxHistory>30</maxHistory>-->
    <!--    </rollingPolicy>-->
    <!--    <encoder>-->
    <!--        <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
    <!--    </encoder>-->
    <!--</appender>-->


    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="/app/log"/>

    <!-- 子节点 <appender>: 负责写日志的组件，它有两个必要属性 name 和 class 。name 指定 appender 名称，class 指定 appender 的全类名 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        ch.qos.logback.core.ConsoleAppender: 把日志输出到控制台，有以下子节点:
            <encoder>: 对日志进行格式化。（具体参数稍后讲解 ）
            <target>: 字符串 System.out(默认) 或者 System.err （区别不多说了）
        日志输出格式:
			%d 表示日期时间，
			%thread 表示线程名，
			%-5level 级别从左显示 5 个字符宽度
			%logger{50} 表示 logger 名字最长 50 个字符，否则按照句点分割。
			%msg 日志消息，
			%n 是换行符
        -->
        <!--<encoder>-->
        <!--    <charset>UTF-8</charset>-->
        <!--    <pattern>%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) %green([${LOG_HOME},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}]) %magenta(${PID:-}) %white(-&#45;&#45;) %-20(%yellow([%20.20thread])) %-55(%cyan(%.32logger{30}:%L)) %highlight(- %msg%n)</pattern>-->
        <!--</encoder>-->
        <!-- rollingFileInfo -->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{"yyyy-MM-dd HH:mm:ss,SSS"}[%X{userId}|%X{sessionId}][%p][%c{0}-%M]-%m%n</pattern>
        </encoder>
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        <!--</layout>-->
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!--<appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    &lt;!&ndash; 指定日志文件的名称 &ndash;&gt;-->
    <!--    <file>${LOG_HOME}/${appName}.log</file>-->
    <!--    &lt;!&ndash;-->
    <!--    当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名-->
    <!--    TimeBasedRollingPolicy:  最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。-->
    <!--    &ndash;&gt;-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        &lt;!&ndash;-->
    <!--        滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}: 按天进行日志滚动-->
    <!--        %i: 当文件大小超过maxFileSize时，按照i进行文件滚动-->
    <!--        &ndash;&gt;-->
    <!--        <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>-->
    <!--        &lt;!&ndash; -->
    <!--        可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，-->
    <!--        且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，-->
    <!--        那些为了归档而创建的目录也会被删除。-->
    <!--        &ndash;&gt;-->
    <!--        <MaxHistory>365</MaxHistory>-->
    <!--        &lt;!&ndash; -->
    <!--        当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy-->
    <!--        &ndash;&gt;-->
    <!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--            <maxFileSize>100MB</maxFileSize>-->
    <!--        </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--    </rollingPolicy>-->
    <!--    &lt;!&ndash; 日志输出格式:  &ndash;&gt;-->
    <!--    <layout class="ch.qos.logback.classic.PatternLayout">-->
    <!--        <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>-->
    <!--    </layout>-->
    <!--</appender>-->

    <!-- 
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name: 表示匹配的logger类型前缀，也就是包的前半部分
		level: 要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity: 作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false: 表示只用当前logger的appender-ref，true:
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- hibernate logger -->
    <logger name="com.atguigu" level="debug"/>
    <!-- Spring framework logger -->
    <logger name="org.springframework" level="debug" additivity="false"/>
    <logger name="cn.mine.ProjectUtilsTest" level="info"/>


    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="info">
        <appender-ref ref="stdout"/>
        <!--<appender-ref ref="appLogAppender"/>-->
    </root>
</configuration>