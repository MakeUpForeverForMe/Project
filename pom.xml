<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>project</groupId>
  <artifactId>Project</artifactId>
  <packaging>pom</packaging>
  <version>1.0</version>
  <modules>
    <module>AKKA</module>
    <module>BinLogSync</module>
    <module>MapReduce</module>
    <module>Scala</module>
    <module>Spark</module>
    <module>Zookeeper</module>
    <module>Kafka</module>
    <module>ProjectUtils</module>
    <module>Travel</module>
  </modules>

  <properties>
    <encoding>UTF-8</encoding>                                <!-- Encoding         版本 -->
    <java.version>1.8</java.version>                          <!-- Java             版本 -->
    <scala.prefix>2.11</scala.prefix>                         <!-- ScalaPrefix      版本 -->
    <scala.version>${scala.prefix}.8</scala.version>          <!-- Scala            版本 -->
    <log4j.version>1.2.17</log4j.version>                     <!-- Log4j            版本 -->
    <slf4j.version>1.7.25</slf4j.version>                     <!-- Slf4j            版本 -->
    <junit.version>4.12</junit.version>                       <!-- Junit            版本 -->
    <aes.version>1.11</aes.version>                           <!-- Aes              版本 -->
    <mysqlConnector.version>5.1.47</mysqlConnector.version>   <!-- MysqlConnector   版本 -->
    <commons-io.version>2.4</commons-io.version>              <!-- commons-io       版本 -->
    <fastjson.version>1.2.62</fastjson.version>               <!-- FastJson         版本 -->
    <netty.version>4.1.51.Final</netty.version>               <!-- Netty            版本 -->
    <akka.version>2.4.17</akka.version>                       <!-- AKKA             版本 -->
    <akka.kryo.version>1.0.0</akka.kryo.version>              <!-- AKKAKryo         版本 -->
    <!--<zookeeper.version>3.4.5-cdh6.3.1</zookeeper.version>     &lt;!&ndash; Zookeeper        版本 &ndash;&gt;-->
    <zookeeper.version>3.4.5</zookeeper.version>              <!-- Zookeeper        版本 -->
    <kafka.version>2.1.0</kafka.version>                      <!-- Kafka            版本 -->
    <hadoop.version>3.0.0</hadoop.version>                    <!-- Hadoop           版本 -->
    <hive.version>2.1.1</hive.version>                        <!-- Hive             版本 -->
    <spark.version>2.3.1</spark.version>                      <!-- Spark            版本 -->
    <janino.version>3.0.8</janino.version>                    <!-- Spark         报错解决 -->
    <flink.vsersion>1.10.0</flink.vsersion>                   <!-- Flink            版本 -->
  </properties>

  <dependencies>
    <!-- Scala 相关依赖 -->
    <!-- https://mvnrepository.com/artifact/org.scala-lang/scala-library -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <!-- Log4j 相关依赖 -->
    <!-- https://mvnrepository.com/artifact/log4j/log4j -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <!-- Slf4j 相关依赖 -->
    <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>${slf4j.version}</version>
      <!--<scope>test</scope>-->
    </dependency>
    <!-- Junit 相关依赖 -->
    <!-- https://mvnrepository.com/artifact/junit/junit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <!--<scope>test</scope>-->
    </dependency>
  </dependencies>


  <dependencyManagement>
    <dependencies>
      <!-- 自定义工具类的相关依赖 -->
      <dependency>
        <groupId>project</groupId>
        <artifactId>ProjectUtils</artifactId>
        <version>${version}</version>
      </dependency>
      <!-- Aes 加密的相关依赖 -->
      <!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>${aes.version}</version>
      </dependency>
      <!-- MysqlConnector 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysqlConnector.version}</version>
      </dependency>
      <!-- FileUtils 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
      <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>${commons-io.version}</version>
      </dependency>
      <!-- FastJson 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>${fastjson.version}</version>
      </dependency>
      <!-- Netty 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-all</artifactId>
        <version>${netty.version}</version>
      </dependency>


      <!-- 添加akka的actor依赖 -->
      <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-actor_${scala.prefix}</artifactId>
        <version>${akka.version}</version>
      </dependency>
      <!-- 多进程之间的Actor通信 -->
      <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-remote_${scala.prefix}</artifactId>
        <version>${akka.version}</version>
      </dependency>
      <!-- 使用 AKKA-kryo 序列化 -->
      <!-- https://mvnrepository.com/artifact/io.altoo/akka-kryo-serialization -->
      <dependency>
        <groupId>io.altoo</groupId>
        <artifactId>akka-kryo-serialization_${scala.prefix}</artifactId>
        <version>${akka.kryo.version}</version>
      </dependency>


      <!-- Zookeeper 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->
      <dependency>
        <groupId>org.apache.zookeeper</groupId>
        <artifactId>zookeeper</artifactId>
        <version>${zookeeper.version}</version>
        <!--<type>pom</type>-->
      </dependency>

      <!-- Kafka 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka -->
      <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka_${scala.prefix}</artifactId>
        <version>${kafka.version}</version>
      </dependency>

      <!-- Hadoop 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs -->
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-common</artifactId>
        <version>${hadoop.version}</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs -->
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-hdfs</artifactId>
        <version>${hadoop.version}</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client -->
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-client</artifactId>
        <version>${hadoop.version}</version>
      </dependency>

      <!-- Hive 相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec -->
      <dependency>
        <groupId>org.apache.hive</groupId>
        <artifactId>hive-exec</artifactId>
        <version>${hive.version}</version>
      </dependency>

      <!-- Spark相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core -->
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scala.prefix}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-sql -->
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scala.prefix}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <!-- Spark java.lang.NoClassDefFoundError: org/codehaus/janino/InternalCompilerException -->
      <dependency>
        <groupId>org.codehaus.janino</groupId>
        <artifactId>commons-compiler</artifactId>
        <version>${janino.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.janino</groupId>
        <artifactId>janino</artifactId>
        <version>${janino.version}</version>
      </dependency>

      <!-- Flink相关依赖 -->
      <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-scala -->
      <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-scala_${scala.prefix}</artifactId>
        <version>${flink.vsersion}</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala -->
      <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-streaming-scala_${scala.prefix}</artifactId>
        <version>${flink.vsersion}</version>
        <!--<scope>provided</scope>-->
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-connector-kafka -->
      <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-connector-kafka_${scala.prefix}</artifactId>
        <version>${flink.vsersion}</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <build>
    <!--包名-->
    <finalName>mineProject</finalName>
    <!--<resources>-->
    <!--<resource>-->
    <!--<directory>src/main/java</directory>-->
    <!--<filtering>false</filtering>-->
    <!--<excludes>-->
    <!--<exclude>**/*.java</exclude>-->
    <!--</excludes>-->
    <!--</resource>-->
    <!--</resources>-->
    <plugins>
      <!-- 配置 Scala 的编译插件 -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.2.2</version>
        <configuration>
          <encoding>${encoding}</encoding>
          <source>${scala.version}</source>
          <target>${scala.version}</target>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 配置 Java 的编译版本 -->
      <plugin>
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <artifactId>maven-compiler-plugin</artifactId>
        <!--<version>3.6.1</version>-->
        <configuration>
          <encoding>${encoding}</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <!-- 打包插件 -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <outputDirectory>${project.build.directory}</outputDirectory>
          <!-- 自定义的configuration配置后，将会生成一个demo-demo.jar 文件在目录 output 下，其中前一个demo
            来自finalName，后一个demo来自assembly descriptor中的id，其中的内容和默认的打包出来的jar类似，
            如果只想有finalName，则增加配置：<appendAssemblyId/>-->
          <appendAssemblyId>false</appendAssemblyId>
          <!--描述文件位置-->
          <descriptors>
            <descriptor>${project.basedir}/../conf/assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <!-- 配置执行器 -->
        <executions>
          <execution>
            <id>make-assembly</id>
            <!-- 绑定到 package 生命周期阶段上 -->
            <phase>package</phase>
            <goals>
              <!-- 只运行一次 -->
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 打包跳过测试类 -->
      <plugin>
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <testFailureIgnore>true</testFailureIgnore>
          <skip>true</skip>
        </configuration>
      </plugin>
      <!-- Copy 指定工程中的配置文件 -->
      <!--<plugin>-->
      <!--&lt;!&ndash;<groupId>org.apache.maven.plugins</groupId>&ndash;&gt;-->
      <!--<artifactId>maven-resources-plugin</artifactId>-->
      <!--&lt;!&ndash;<version>2.7</version>&ndash;&gt;-->
      <!--<executions>-->
      <!--<execution>-->
      <!--<id>copy-resources</id>-->
      <!--<phase>package</phase>-->
      <!--<goals>-->
      <!--<goal>copy-resources</goal>-->
      <!--</goals>-->
      <!--<configuration>-->
      <!--<outputDirectory>${basedir}/conf</outputDirectory>-->
      <!--<encoding>${encoding}</encoding>-->
      <!--<resources>-->
      <!--<resource>-->
      <!--<directory>src/main/resources</directory>-->
      <!--<filtering>true</filtering>-->
      <!--<includes>-->
      <!--&lt;!&ndash;<exclude>**/*.xml</exclude>&ndash;&gt;-->
      <!--&lt;!&ndash;<exclude>**/*.conf</exclude>&ndash;&gt;-->
      <!--<exclude>*.properties</exclude>-->
      <!--</includes>-->
      <!--</resource>-->
      <!--</resources>-->
      <!--</configuration>-->
      <!--</execution>-->
      <!--</executions>-->
      <!--</plugin>-->
    </plugins>
  </build>


  <repositories>
    <repository>
      <id>aliyun</id>
      <name>Nexus Release Repository</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>cloudera</id>
      <url>https://repository.cloudera.com/artifactory/cloudera-repos</url>
    </repository>

    <repository>
      <id>osgeo</id>
      <name>Open Source Geospatial Foundation Repository</name>
      <url>https://repo.osgeo.org/repository/release/</url>
    </repository>

    <repository>
      <id>boundless</id>
      <name>Boundless Maven Repository</name>
      <url>http://repo.boundlessgeo.com/main</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>hortonworks.extrepo</id>
      <name>Hortonworks HDP</name>
      <url>http://repo.hortonworks.com/content/repositories/releases</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>hortonworks.other</id>
      <name>Hortonworks Other Dependencies</name>
      <url>http://repo.hortonworks.com/content/groups/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>scala-tools.org1</id>
      <name>Scala-Tools Maven2 Repository</name>
      <url>http://scala-tools.org/repo-releases</url>
    </repository>
    <repository>
      <id>scala-tools.org2</id>
      <name>Scala-Tools Maven2 Repository</name>
      <url>http://maven.restlet.org/</url>
    </repository>
    <repository>
      <id>scala-tools.org3</id>
      <name>Scala-Tools Maven2 Repository</name>
      <url>https://repository.cloudera.com/content/repositories/releases/</url>
    </repository>
  </repositories>
</project>