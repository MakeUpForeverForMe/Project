# log4j.rootLogger=[level],appenderName,appenderName,...

# level 有以下8中情况
# ALL     打印所有级别的日志
# TRACE     指定细粒度比DEBUG更低的信息事件
# DEBUG     指定细粒度信息事件是最有用的应用程序调试
# INFO      指定能够突出在粗粒度级别的应用程序运行情况的信息的消息
# WARN      指定具有潜在危害的情况
# ERROR     错误事件可能仍然允许应用程序继续运行
# FATAL     指定非常严重的错误事件，这可能导致应用程序中止
# OFF     这是最高等级，为了关闭日志记录
# 建议只是用 DEBUG、INFO、WARN、ERROR 这四个级别

### 设置 ###
#log4j.rootLogger=DEBUG,stdout,D,E

# log4j.appender.appenderName = fully.qualified.name.of.appender.class
# log4j.appender.appenderName.option1 = value1
# log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
# log4j.appender.appenderName.layout.option1 = value1

# appender.class 有以下5中情况
# org.apache.log4j.ConsoleAppender              控制台
# org.apache.log4j.FileAppender                 文件
# org.apache.log4j.DailyRollingFileAppender     每天产生一个日志文件
# org.apache.log4j.RollingFileAppender          文件大小到达指定尺寸的时候产生一个新的文件
# org.apache.log4j.WriterAppender               将日志信息以流格式发送到任意指定的地方

# layout.class 有以下4中情况
# org.apache.log4j.HTMLLayout       以HTML表格形式布局
# org.apache.log4j.PatternLayout    可以灵活地指定布局模式
# org.apache.log4j.SimpleLayout     包含日志信息的级别和信息字符串
# org.apache.log4j.TTCCLayout       包含日志产生的时间、线程、类别等等信息

# 输出类似printf函数的打印格式的格式化日志信息 (%-5p ：表示左对齐，占五个字符)
# %% 输出一个"%"字符
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss.SSS}，输出类似：2002年10月18日 22:10:28.921
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出日志信息所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %x 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %m 输出代码中指定的消息,产生的日志具体信息
# %n 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
# %l 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如
# 1) %20c     指定输出 category 的名称，最小的宽度是 20，如果 category 的名称小于20的话，默认的情况下右对齐
# 2) %-20c    指定输出 category 的名称，最小的宽度是 20，如果 category 的名称小于20的话，"-"号指定左对齐
# 3) %.30c    指定输出 category 的名称，最大的宽度是 30，如果 category 的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格
# 4) %20.30c  如果 category 的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉

# 建议只是用 DEBUG、INFO、WARN、ERROR 这四个级别

# 设置所有相关日志级别 与 log4j.rootLogger=ALL,stdout 相似。所以可以不设置
# log4j.appender.Threshold=DEBUG

log4j.rootLogger                                =   ALL,stdout

### 输出信息到控制台 ###
log4j.appender.stdout                           =   org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Threshold                 =   INFO
#log4j.appender.stdout.Threshold                 =   WARN
log4j.appender.stdout.Threshold                 =   ERROR
log4j.appender.stdout.Target                    =   System.out
log4j.appender.stdout.layout                    =   org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern  =   %-d{yyyy-MM-dd HH:mm:ss.SSS}    [ %-6p] - [%-40c] %m%n

### 输出DEBUG 级别以上的日志到=D://Users/ximing.wei/Desktop/debug.log ###
log4j.appender.D                                =   org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File                           =   D://Users/ximing.wei/Desktop/log/debug.log
log4j.appender.D.Append                         =   true
log4j.appender.D.Threshold                      =   DEBUG
log4j.appender.D.layout                         =   org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern       =   %-d{yyyy-MM-dd HH:mm:ss.SSS}    [ %-6p] - [%-40c] %m%n

### 输出ERROR 级别以上的日志到=D://Users/ximing.wei/Desktop/error.log ###
log4j.appender.E                                =   org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File                           =   D://Users/ximing.wei/Desktop/log/error.log
log4j.appender.E.Append                         =   true
log4j.appender.E.Threshold                      =   ERROR
log4j.appender.E.layout                         =   org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern       =   %-d{yyyy-MM-dd HH:mm:ss.SSS}    [ %-6p] - [%-40c] %m%n
